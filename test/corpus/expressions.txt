====================
index element access
====================

foo["one"]
foo[CONST]
@foo[1]
@@foo[:my_symbol]
FOO[foo[1]] 

---
(program
  (index_expression target: (local_variable) key: (string))
  (index_expression target: (local_variable) key: (constant))
  (index_expression target: (instance_variable) key: (integer))
  (index_expression target: (class_variable) key: (symbol))
  (index_expression target: (constant) key: (index_expression target: (local_variable) key: (integer)))
)

==========
assignment
==========

foo = 1
foo : Int32 = 1
foo: String = "test"
@foo = "test"
@@foo = [1, 2, 3]
PI = 3.14
foo = bar = 4
foo[:test] = foo[:otherTest]

foo.bar = 4

a, b = stuff

---
(program
  (assignment lhs: (local_variable) rhs: (integer))
  (assignment lhs: (local_variable) type: (type) rhs: (integer))
  (assignment lhs: (local_variable) type: (type) rhs: (string))
  (assignment lhs: (instance_variable) rhs: (string))
  (assignment lhs: (class_variable) rhs: (array (integer) (integer) (integer)))
  (assignment lhs: (constant) rhs: (float))
  (assignment lhs: (local_variable) rhs: (assignment lhs: (local_variable) rhs: (integer)))
  (assignment 
    lhs: (index_expression target: (local_variable) key: (symbol)) 
    rhs: (index_expression target: (local_variable) key: (symbol))
  )
  (assignment
    lhs: (property object: (local_variable) name: (identifier))
    rhs: (integer)
  )
  (assignment
    lhs: (local_variable) lhs: (local_variable)
    rhs: (local_variable)
  )
)

=================
method definition
=================

def do_it
  @message = "don't let your dreams be dreams!"
end

def do_it_again()
  @done = true
end

def set_message(message: String)
  @message = message
end

---

(program
  (method_definition name: (identifier) 
    (assignment lhs: (instance_variable) rhs: (string))
  )
  (method_definition name: (identifier) 
    (assignment lhs: (instance_variable) rhs: (bool))
  )
  (method_definition name: (identifier) 
    (param name: (identifier) type: (type))
    (assignment lhs: (instance_variable) rhs: (local_variable))
  )
)

================
class definition
================

class Foo 
end

class MyMath 
  PI = 3.14
end

class SubFoo < Foo
  @@thing = :yes
end

class MyList(T) < Foo
  @name = "yes"
end

class MyHash(A, B) < Bar
  local_var = 44
end

class MyList(T) < Foo
  def initialize(base: Array(T))
    @contents = base
  end
end

---

(program
  (class_definition name: (type))
  (class_definition name: (type)
    (assignment lhs: (constant) rhs: (float))
  )
  (class_definition name: (type) superclass: (type)
    (assignment lhs: (class_variable) rhs: (symbol))
  )
  (class_definition name: (type generic_param: (type)) superclass: (type)
    (assignment lhs: (instance_variable) rhs: (string))
  )
  (class_definition name: (type generic_param: (type) generic_param: (type)) superclass: (type)
    (assignment lhs: (local_variable) rhs: (integer))
  )
  (class_definition name: (type generic_param: (type)) superclass: (type)
    (method_definition name: (identifier) 
      (param name: (identifier) type: (type generic_param: (type)))
      (assignment lhs: (instance_variable) rhs: (local_variable))
    )
  )
)

=================
module definition
==================

module A 
end

module B 
  class MyB 
    def initialize(b : Int64)
      @b = b
    end
  end
end

module C
  include A
  extend B
  extend self
end

---

(program
  (module_definition name: (type))
  (module_definition name: (type)
    (class_definition name: (type)
      (method_definition name: (identifier) 
        (param name: (identifier) type: (type))
        (assignment lhs: (instance_variable) rhs: (local_variable))
      )
    )
  )
  (module_definition name: (type)
    (include_statement (type))
    (extend_statement (type))
    (extend_statement)
  )
)

=====
block
=====

do 
  foo = 42
  foo
end

do |a: Int32, b: String|
  foo = a
  bar = b
  [foo, bar]
end

{|foo, bar| foo}

---
(program
  (block 
    (assignment lhs: (local_variable) rhs: (integer))
    (local_variable)
  )
  (block 
    (param name: (identifier) type: (type))
    (param name: (identifier) type: (type))
    (assignment lhs: (local_variable) rhs: (local_variable))
    (assignment lhs: (local_variable) rhs: (local_variable))
    (array (local_variable) (local_variable))
  )
  (block 
    (param name: (identifier)) 
    (param name: (identifier))
    (local_variable)
  )
)

=================
binary operations
=================

1 + 1
9002 - 1
3.14 * 2
42 / 3.33
foo % 2
foo & 2
foo | 2
2 ^ 3
2 ** 3
2 >> 1
responses << :yes
foo == PI
foo != bar
foo === :yes
something < 3.14
something <= 3.14
something > 3.14
something >= 3.14
something <=> 3.14
my_thing =~ /test/

1 + 1 + 1

foo = 1 + 1

---

(program
  (binary_operation (integer) (operator) (integer))
  (binary_operation (integer) (operator) (integer))
  (binary_operation (float) (operator) (integer))
  (binary_operation (integer) (operator) (float))
  (binary_operation (local_variable) (operator) (integer))
  (binary_operation (local_variable) (operator) (integer))
  (binary_operation (local_variable) (operator) (integer))
  (binary_operation (integer) (operator) (integer))
  (binary_operation (integer) (operator) (integer))
  (binary_operation (integer) (operator) (integer))
  (binary_operation (local_variable) (operator) (symbol))
  (binary_operation (local_variable) (operator) (constant))
  (binary_operation (local_variable) (operator) (local_variable))
  (binary_operation (local_variable) (operator) (symbol))
  (binary_operation (local_variable) (operator) (float))
  (binary_operation (local_variable) (operator) (float))
  (binary_operation (local_variable) (operator) (float))
  (binary_operation (local_variable) (operator) (float))
  (binary_operation (local_variable) (operator) (float))
  (binary_operation (local_variable) (operator) (regex))
  (binary_operation 
    (binary_operation (integer) (operator) (integer))
    (operator) (integer)
  )
  (assignment lhs: (local_variable) rhs: (binary_operation
    (integer) (operator) (integer))
  )
)

===========
method call
===========

foo.bar

MyClass.static_method

foo.bar(1, 2)

foo.bar 1, 2

my_array.each_slice(2) do |a: Int32, b: Int32|
  a + b
end


---

(program
  (method_call object: (local_variable) name: (identifier))
  (method_call object: (constant) name: (identifier))
  (method_call object: (local_variable) name: (identifier) arg: (integer) arg: (integer))
  (method_call object: (local_variable) name: (identifier) arg: (integer) arg: (integer))
  (method_call object: (local_variable) name: (identifier) arg: (integer)
    (block 
      (param name: (identifier) type: (type))
      (param name: (identifier) type: (type))
      (binary_operation (local_variable) (operator) (local_variable))
    )
  )
)


===============
enum definition
===============

enum Color
  Red
  Green
  Blue

  def is_red?
    self == Color::Red
  end
end

---

(program
  (enum_definition name: (constant)
    (constant) (constant) (constant)
    (method_definition name: (identifier)
      (binary_operation (local_variable) (operator) (constant (namespace)))
    )
  )
)


======
struct
======

struct Point
  def initialize(@x : Int32, @y : Int32)
  end
end

---

(program
  (struct_definition name: (type)
    (method_definition name: (identifier)
      (param name: (identifier) type: (type))
      (param name: (identifier) type: (type))
    )
  )
)

==================
require statements
==================

require "foo"
require "./foo.cr"

---

(program
  (require_statement (string))
  (require_statement (string))
)
