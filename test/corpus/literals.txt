===
nil
===

nil

---

(program
  (nil))

====
bool
====

true
false

---

(program
  (bool) (bool))

=======
integer
=======

1
1_i8 
1_i16 
1_i32 
1_i64 
1_u8  
1_u16 
1_u32 
1_u64 
+10 
-20 
2147483648          
9223372036854775808 
1_000_000
0b1101
0o1234567
0xFEABC12345789

---
(program
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer)
 (integer))


=====
float
=====

1.0
1.0_f32
1_f32
1e10
1.5e10
1.5e-7
+1.3
-0.5
1_000_000.111_111

---

(program
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float))

======
symbol
======

:a
:a=
:_a
:unquoted_symbol
:question?
:exclamation!
:あ
:"ok yes!!"
:"this one has \" a quote"
:🦉❓
:🦉=

---

(program
  (symbol) (symbol) (symbol) (symbol) (symbol) (symbol) (symbol)
  (symbol) (symbol) (symbol) (symbol)
)

======
operator symbols
======

:+
:-
:*
:/
:%
:&
:|
:^
:**
:>>
:<<
:==
:!=
:<
:<=
:>
:>=
:<=>
:===
:[]
:[]?
:[]=
:!
:~
:!~
:=~

----

(program
  (symbol) (symbol) (symbol) (symbol) (symbol) (symbol) (symbol)
  (symbol) (symbol) (symbol) (symbol) (symbol) (symbol) (symbol)
  (symbol) (symbol) (symbol) (symbol) (symbol) (symbol) (symbol)
  (symbol) (symbol) (symbol) (symbol) (symbol)
)

====
char
====

'a'
'z'
'0'
'_'
'あ'
'\''
'\\'
'\a'
'\b'
'\e'
'\f'
'\n'
'\r'
'\t'
'\v'
'\uFFFF'
'\u{10FFFF}'

---

(program
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char)
  (char))

======
string
======

"hello world"
"hello \" world\"

---

(program (string) (string))

=====
array
=====

[ 1 ]
[ 1, 2, 3 ]
[ 'a', 'b', 'c']
["test", "one", "two"]
[1, "hello", 'x']
[1, ["test"], :symbol]

---

(program
 (array (integer))
 (array (integer) (integer) (integer))
 (array (char) (char) (char))
 (array (string) (string) (string))
 (array (integer) (string) (char))
 (array (integer) (array (string)) (symbol)))

====
hash
====
 
{"one" => 1}
{"one" => '1', "two" => :two}
{1 => "one", '2' => "two"}
{} of Int32 => Int32
{ } of ModuleName::MyClass => ModuleName::MyClass(T)

---

(program
  (hash key: (string) value: (integer))
  (hash 
    key: (string) value: (char)
    key: (string) value: (symbol)
  )
  (hash
    key: (integer) value: (string)
    key: (char) value: (string)
  )
  (hash key_type: (type_identifier) value_type: (type_identifier))
  (hash key_type: (type_identifier (namespace)) value_type: (generic_type (type_identifier (namespace)) (type_arguments (type_identifier))))
)

=====
range
=====

1..2
1...2
1.0..2.0
1.0...2.0
...2
2...

---
(program
  (range start: (integer) end: (integer))
  (range start: (integer) end: (integer))
  (range start: (float) end: (float))
  (range start: (float) end: (float))
  (range end: (integer))
  (range start: (integer))
)

=====
regex
=====

//
/[A-Za-z0-9]+/
/test*/
/\//

---

(program
  (regex)
  (regex)
  (regex)
  (regex)
)

=====
tuple
=====

Tuple.new
{1, 2, 3}
{"four",5,:six}

---
(program
  (tuple)
  (tuple (integer) (integer) (integer))
  (tuple (string) (integer) (symbol))
)

==========
namedtuple
==========
{name: "Crystal", year: 2011}
{"this is a key": 1}
NamedTuple(name: String, year: Int32)

---

(program
  (namedTupleLiteral 
    key: (identifier) value: (string)
    key: (identifier) value: (integer)
  )
  (namedTupleLiteral key: (string) value: (integer))
  (namedTupleLiteral 
    key_name: (identifier) value_type: (type_identifier)
    key_name: (identifier) value_type: (type_identifier)
  )
)


=======
command
=======

`echo "hello $(hostname)!"`
%x(echo "hello `hostname`")

---

(program (commandLiteral) (commandLiteral))
